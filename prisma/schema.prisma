generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
  @@index([userId])
}

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  isActive         Boolean   @default(true)
  groupsIds        String[]  @db.ObjectId @default([])
  groups           Group[] @relation("UserGroups", fields: [groupsIds], references: [id])
  accounts         Account[]
  sessions         Session[]
}

model VerificationToken {
  identifier String @id @map("_id")
  token      String @unique
  expires    DateTime
  @@unique([identifier, token])
}

enum Category {
  Technology
  Fruniture
  Food
  Clothing
  Books
}

model Group {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  country          String
  name             String
  description      String?
  category         Category
  subCategory      String
  userIds          String[]  @db.ObjectId
  users            User[]    @relation("UserGroups", fields: [userIds], references: [id])
  expireAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
